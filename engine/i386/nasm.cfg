;
;   part of this code is origined from
;
;       GOGO-no-coda
;       Copyright (c) 2001,2002,2003 gogo-developer
;

; Visual C++        -> define WIN32
; Borland or cygwin -> WIN32 and __BORLANDC__
; Mingw             -> WIN32 and __MINGW32_VERSION
; FreeBSD 2.x       -> AOUT
; TownsOS           -> __tos__
; OS/2              -> AOUT or OMF
; otherwise         ->   none

BITS 32


%ifdef WIN32
	%define _ADD_UNDERSCORE
%ifdef __BORLANDC__
	%define BSS .data
	%define SEGMENT_ALIGN align=16
	%define PROC_ALIGN    align 16
%elifdef __MINGW32_VERSION
	%define BSS .data
	%define SEGMENT_ALIGN align=32
	%define PROC_ALIGN    align 32
%else
	%define BSS .bss
	%define SEGMENT_ALIGN align=32
	%define PROC_ALIGN    align 32
%endif
	%define segment_text segment .text SEGMENT_ALIGN class=CODE use32
	%define segment_data segment .data SEGMENT_ALIGN class=DATA use32
	%define segment_bss  segment BSS   SEGMENT_ALIGN class=DATA use32
%elifdef AOUT
	%define _ADD_UNDERSCORE
	%define SEGMENT_ALIGN align=32
	%define PROC_ALIGN    align 32
	%define segment_text segment .text
	%define segment_data segment .data
	%define segment_bss  segment .bss
%elifdef OMF
	%define SEGMENT_ALIGN align=16
	%define PROC_ALIGN    align 16
	%define segment_text segment TEXT32 SEGMENT_ALIGN class=CODE use32 flat
	%define segment_data segment DATA32 SEGMENT_ALIGN class=DATA use32 flat
	%define segment_bss  segment BSS32 SEGMENT_ALIGN class=BSS use32 flat
	segment_data
        segment_bss
        group DGROUP DATA32 BSS32
%else
	%define SEGMENT_ALIGN align=16
	%define PROC_ALIGN    align 16
	%define segment_text segment .text SEGMENT_ALIGN class=CODE use32
	%define segment_data segment .data SEGMENT_ALIGN class=DATA use32
	%define segment_bss  segment .bss  SEGMENT_ALIGN class=DATA use32
%endif


%ifdef __tos__
group CGROUP text
group DGROUP data
%endif

%define xm0 xmm0
%define xm1 xmm1
%define xm2 xmm2
%define xm3 xmm3
%define xm4 xmm4
%define xm5 xmm5
%define xm6 xmm6
%define xm7 xmm7

%imacro globaldef 1
	%ifdef _ADD_UNDERSCORE
		%define %1 _%1
	%endif
	global %1
%endmacro

%imacro externdef 1
	%ifndef %1_PREDEFINED
		%define %1_PREDEFINED
		%ifdef _ADD_UNDERSCORE
			%define %1 _%1
		%endif
		extern %1
	%endif
%endmacro

%imacro proc 1
	%push	proc
	%ifdef _ADD_UNDERSCORE
		global _%1
	%else
		global %1
	%endif
	PROC_ALIGN
%1:
_%1:
%endmacro

%define PACK(x,y,z,w)	(x*64+y*16+z*4+w)

%imacro	CLKBEGIN	0
	%ifndef __CLKBEGIN_PREDEFINED__
		%define __CLKBEGIN_PREDEFINED__
		%ifdef _ADD_UNDERSCORE
			%define clkbegin _clkbegin
		%endif
		extern clkbegin
	%endif
	call	clkbegin
%endmacro

%imacro	CLKEND	0
	%ifndef __CLKEND_PREDEFINED__
		%define __CLKEND_PREDEFINED__
		%ifdef _ADD_UNDERSCORE
			%define clkend _clkend
		%endif
		extern clkend
	%endif
	call	clkend
%endmacro

%imacro	CLKSTAT 0
	%ifndef __CLKSTAT_PREDEFINED__
		%define __CLKSTAT_PREDEFINED__
		%ifdef _ADD_UNDERSCORE
			%define clkstat _clkstat
		%endif
		extern clkstat
	%endif
	call	clkstat
%endmacro

; bug of NASM-0.98
%define pushf db 0x66, 0x9C
%define popf  db 0x66, 0x9D

; added by kei 00/10/29
; define VARS_IMPLIMENT in only one source

; macro to define bss (without initialization)
; %1   name of bss-variables
; %2   byte size of bss-variables
%imacro bssvardef 2
  %ifdef VARS_IMPLIMENT
     globaldef %1
     %1 resb %2
  %else
     externdef %1
  %endif
%endmacro

; macro to define data (with initialization)
; %1   name of data-variables
; %2-  initial values of data-variables
%imacro ddvarsdef 1-*
  %ifdef VARS_IMPLIMENT
     globaldef %1
     %1 dd %2
     %if %0 > 2
       %rep %0-2
         rotate 1
         dd %2
       %endrep
     %endif
  %else
     externdef %1
  %endif
%endmacro

%define	ge16(n)		((((n) / 16)*0xFFFFFFFF) & 0xFFFFFFFF)
%define	ge15(n)		((((n) / 15)*0xFFFFFFFF) & 0xFFFFFFFF)
%define	ge14(n)		((((n) / 14)*0xFFFFFFFF) & 0xFFFFFFFF)
%define	ge13(n)		((((n) / 13)*0xFFFFFFFF) & 0xFFFFFFFF)
%define	ge12(n)		((((n) / 12)*0xFFFFFFFF) & 0xFFFFFFFF)
%define	ge11(n)		((((n) / 11)*0xFFFFFFFF) & 0xFFFFFFFF)
%define	ge10(n)		((((n) / 10)*0xFFFFFFFF) & 0xFFFFFFFF)
%define	ge9(n)		((((n) /  9)*0xFFFFFFFF) & 0xFFFFFFFF)
%define	ge8(n)		(ge9(n) | ((((n) /  8)*0xFFFFFFFF) & 0xFFFFFFFF))
%define	ge7(n)		(ge9(n) | ((((n) /  7)*0xFFFFFFFF) & 0xFFFFFFFF))
%define	ge6(n)		(ge9(n) | ((((n) /  6)*0xFFFFFFFF) & 0xFFFFFFFF))
%define	ge5(n)		(ge9(n) | ((((n) /  5)*0xFFFFFFFF) & 0xFFFFFFFF))
%define	ge4(n)		(ge5(n) | ((((n) /  4)*0xFFFFFFFF) & 0xFFFFFFFF))
%define	ge3(n)		(ge5(n) | ((((n) /  3)*0xFFFFFFFF) & 0xFFFFFFFF))
%define	ge2(n)		(ge3(n) | ((((n) /  2)*0xFFFFFFFF) & 0xFFFFFFFF))
%define	ge1(n)		(ge2(n) | ((((n) /  1)*0xFFFFFFFF) & 0xFFFFFFFF))

; macro to align for begining of loop
; %1   doesn't align if it LE bytes to next alignment 
;      4..16 
;      default is 12

%imacro	loopalignK6	0-1 12 
%%here:
	times (($$-%%here) & 15 & ge1(($$-%%here) & 15) & ~ge4(($$-%%here) & 15)) nop
	times (1                & ge4(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) jmp short %%skip
	times (((($$-%%here) & 15)-2) & ge4(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) nop
%%skip:
%endmacro

%imacro	loopalignK7	0-1 12 
%%here:
	times (1 & ge1(($$-%%here) & 15)  & ~ge2(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) nop
	times (1 & ge2(($$-%%here) & 15)  & ~ge3(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Bh,0C0h
	times (1 & ge3(($$-%%here) & 15)  & ~ge4(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,004h,020h
	times (1 & ge4(($$-%%here) & 15)  & ~ge5(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,044h,020h,000h
	times (1 & ge5(($$-%%here) & 15)  & ~ge6(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,044h,020h,000h,090h
	times (1 & ge6(($$-%%here) & 15)  & ~ge7(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,080h,0,0,0,0
	times (1 & ge7(($$-%%here) & 15)  & ~ge8(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,004h,005h,0,0,0,0
	times (1 & ge8(($$-%%here) & 15)  & ~ge9(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,004h,005h,0,0,0,0,90h
	times (1 & ge9(($$-%%here) & 15)  & ~ge10(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,007h,90h,90h,90h,90h,90h,90h,90h
	times (1 & ge10(($$-%%here) & 15) & ~ge11(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,008h,90h,90h,90h,90h,90h,90h,90h,90h
	times (1 & ge11(($$-%%here) & 15) & ~ge12(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,009h,90h,90h,90h,90h,90h,90h,90h,90h,90h
	times (1 & ge12(($$-%%here) & 15) & ~ge13(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Ah,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h
	times (1 & ge13(($$-%%here) & 15) & ~ge14(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Bh,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h
	times (1 & ge14(($$-%%here) & 15) & ~ge15(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Ch,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h
	times (1 & ge15(($$-%%here) & 15) & ~ge16(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Dh,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h
%%skip:
%endmacro

%imacro	loopalign	0-1 12 
	loopalignK7 %1
%endmacro

%define GOGO_FPU_STATE	(0x272)			; cpu.h Ç∆ÇÃêÆçáê´Ç…íçà”
